/*
..int в C# — это псевдоним типа значения, определенного в библиотеке классов .NET как System.Int32.

Целочисленные типы со знаком
Шаг 1. Использование свойств MinValue и MaxValue для каждого целочисленного типа со знаком

    Console.WriteLine("Signed integral types:");

    Console.WriteLine($"sbyte  : {sbyte.MinValue} to {sbyte.MaxValue}");
    Console.WriteLine($"short  : {short.MinValue} to {short.MaxValue}");
    Console.WriteLine($"int    : {int.MinValue} to {int.MaxValue}");
    Console.WriteLine($"long   : {long.MinValue} to {long.MaxValue}");

Шаг 2. Выполнение кода для просмотра диапазона значений каждого типа данных
    Выходные данные

    Signed integral types:
    sbyte  : -128 to 127
    short  : -32768 to 32767
    int    : -2147483648 to 2147483647
    long   : -9223372036854775808 to 9223372036854775807

Целочисленные типы без знака
Шаг 3. Использование свойств MinValue и MaxValue для каждого целочисленного типа без знака

    Console.WriteLine("");
    Console.WriteLine("Unsigned integral types:");

    Console.WriteLine($"byte   : {byte.MinValue} to {byte.MaxValue}");
    Console.WriteLine($"ushort : {ushort.MinValue} to {ushort.MaxValue}");
    Console.WriteLine($"uint   : {uint.MinValue} to {uint.MaxValue}");
    Console.WriteLine($"ulong  : {ulong.MinValue} to {ulong.MaxValue}");
Шаг 4. Выполнение кода для просмотра диапазона значений каждого типа данных
    Выходные данные
    Unsigned integral types:
    byte   : 0 to 255
    ushort : 0 to 65535
    uint   : 0 to 4294967295
    ulong  : 0 to 18446744073709551615


Резюме

    Целочисленный тип — это простой тип значения для хранения целых чисел.
    Существуют числовые типы данных со знаком и без знака. В целочисленных типах со знаком один бит отводится для указания на то, является ли значение положительным или отрицательным.
    С помощью свойств MaxValue и MinValue числового типа данных можно проверить, поместится ли число в этот тип.

Оценка типов с плавающей запятой

 ..значения float и double хранятся в памяти в двоичном формате (с основанием 2), а decimal — в десятичном формате (с основанием 10). Почему это важно?

Результаты математических операций с двоичными значениями с плавающей запятой могут удивить вас, если вы привыкли к десятичным вычислениям (с основанием 10). Результат такой операции зачастую является приближением к реальному значению. Таким образом, типы float и double позволяют хранить большие числа с малым объемом занимаемой памяти, однако их следует использовать, только если приближение допустимо. Например, при вычислении зоны поражения оружия в видеоигре приближения до тысячных вполне достаточно.


Если требуется более точный результат, следует использовать decimal. Каждое значение типа decimal занимает сравнительно много памяти, однако математические операции дают более точные результаты. Таким образом, decimal следует использовать при работе с финансовыми данными и в других случаях, когда требуется точный результат вычисления.
Шаг 2. Использование свойств MinValue и MaxValue для каждого подписанного типа с плавающей запятой
    Console.WriteLine("");
    Console.WriteLine("Floating point types:");
    Console.WriteLine($"float  : {float.MinValue} to {float.MaxValue} (with ~6-9 digits of precision)");
    Console.WriteLine($"double : {double.MinValue} to {double.MaxValue} (with ~15-17 digits of precision)");
    Console.WriteLine($"decimal: {decimal.MinValue} to {decimal.MaxValue} (with 28-29 digits of precision)");
Шаг 3. Выполнение кода для просмотра диапазона значений каждого типа данных
    Floating point types:
    float  : -3.402823E+38 to 3.402823E+38 (with ~6-9 digits of precision)
    double : -1.79769313486232E+308 to 1.79769313486232E+308 (with ~15-17 digits of precision)
    decimal: -79228162514264337593543950335 to 79228162514264337593543950335 (with 28-29 digits of precision)

    Резюме

    Тип с плавающей запятой — это простой тип значения для хранения дробных чисел.
    При выборе подходящего типа с плавающей запятой необходимо учитывать не только возможное максимальное и минимальное значения. Также следует учесть количество возможных значений после десятичной запятой, способ хранения чисел и его влияние на результат математических операций.
    Особо большие значения с плавающей запятой могут иногда выражаться экспоненциальной записью.
    Способ обработки значений типа decimal и значений типов float и double компилятором и средой выполнения существенно различается. В первую очередь это влияет на точность математических операций.


Упражнение. Ссылочные типы

К ссылочным типам относятся массивы, классы и строки. Ссылочные типы отличаются от типов значений способом хранения значений во время выполнения приложения.

В этом упражнении вы узнаете, чем ссылочные типы отличаются от типов значений и как с помощью оператора new связать переменную со значением в памяти компьютера.

Шаг 2. Определение переменной ссылочного типа

int[] data;
data = new int[3];

//

int[] data = new int[3];

///


Резюме

    Типы значений имеют меньшие допустимые значения и хранятся в стеке. Ссылочные типы могут содержать большие значения, а экземпляр ссылочного типа создается с помощью оператора new. Переменная ссылочного типа содержат ссылку (адрес памяти) на фактическое значение, хранящееся в куче.
    К ссылочным типам относятся массивы, строки и классы.


Если сомневаетесь, выбирайте самый простой вариант. Хотя мы рассмотрели ряд факторов, которые могут обуславливать необходимость использования различных типов данных, поначалу для простоты можно ограничиться набором базовых типов:

    int для большинства целых чисел;
    decimal для денежных значений;
    bool для значений "истина" или "ложь";
    string для буквенно-цифровых значений.


Выбирайте специальные сложные типы в особых ситуациях. Не придумывайте свои типы данных, если подходящие для текущей цели типы уже существуют.

    byte для работы с закодированными данными, которые поступают из других компьютерных систем или имеют разные кодировки;
    double для работы с геометрическими данными или научных вычислений; тип double часто применяется в графических играх;
    System.StringBuilder для составления одной строки из множества литералов или других переменных (эта задача будет рассмотрена более подробно в модуле Изменение содержимого строк с помощью встроенных методов для строковых типов данных в C#);
    System.DateTime для значений даты и времени;
    System.TimeSpan для диапазона лет, месяцев, дней, часов, минут, секунд и миллисекунд;


Резюме

При выборе типов данных в коде необходимо учитывать ряд факторов. И хотя они требуют внимательного рассмотрения, как правило, вполне достаточно ряда базовых типов, таких как int, decimal, string и bool.

*/
