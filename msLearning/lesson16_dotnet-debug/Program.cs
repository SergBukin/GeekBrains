/* 
Что такое отладчик?

Возможно, вы уже пробовали один или несколько из таких подходов к отладке.

    Попробуйте запустить программу еще раз, поскольку она должна работать.
    Расскажите о проблеме резиновой уточке.
    Повторно прочтите код, чтобы выяснить, в чем проблема.
    Проверьте код по каждой строке.
    Разместите в коде несколько сообщений Console.WriteLine("here").

Управление выполнением

С помощью этих элементов управления можно управлять потоком выполнения программы.

Снимок экрана: элементы управления выполнением отладчика Visual Studio Code.

Элементы управления выглядят следующим образом (слева направо):

    Продолжить или приостановить выполнение. Если выполнение приостановлено, оно будет продолжаться до тех пор, пока не будет достигнута следующая точка останова. Если программа запущена, кнопка изменяется на кнопку "Пауза", которую можно использовать для приостановки выполнения.
    Шаг с обходом. Выполнение следующей строки кода в текущем контексте.
    Шаг с заходом. То же, что и Шаг с обходом, однако если следующий оператор является вызовом функции, то выполняется переход к первому оператору кода этой функции (то же, что и команда step).
    Шаг с выходом. Если вы находитесь внутри функции, выполняется оставшийся код этой функции и возврат к оператору после вызова начальной функции (то же, что и команда out).
    Перезапустить. Перезапуск программы с самого начала.
    Остановить. Завершение выполнения и выход из отладчика.


Ведение журнала и трассировка в приложениях .NET?

рассировка — это способ отслеживать выполнение приложения во время его работы.

Запись данных в окна вывода. Здесь можно использовать System.Diagnostics.Debug и System.Diagnostics.Trace наряду System.Console. Debug и Trace являются частью System.Diagnostics и будут записывать данные в журнал только при присоединении соответствующего прослушивателя.

Вы можете выбрать любой из этих API стиля печати. Основные отличия указаны далее.

    System.Console
        Всегда включен и всегда записывает данные в консоль.
        Полезно для сведений, которые могут потребоваться клиенту в выпуске.
        Это самый простой подход. Он часто используется для краткосрочных и непредвиденных действий по отладке. Такой код отладки часто даже не попадает в систему управления версиями.
    System.Diagnostics.Trace
        Включается только при наличии определения TRACE.
        Записывает данные в подключенные прослушиватели, по умолчанию это DefaultTraceListener.
        Используйте этот API при создании журналов, которые будут включены в большинстве сборок.
    System.Diagnostics.Debug
        Включается только при определении DEBUG (в режиме отладки).
        Передает данные в присоединенный отладчик.
        Используйте этот API при создании журналов, которые будут включены только в сборках отладки.

    Console.WriteLine("This message is readable by the end user.");
    Trace.WriteLine("This is a trace message when tracing the app.");
    Debug.WriteLine("This is a debug message just for developers.");

Если необходимо создать одно полное сообщение, используйте инструкцию WriteLine.
C#

Debug.Write("Debug - ");
Debug.WriteLine("This is a full line.");
Debug.WriteLine("This is another full line.");

*/



