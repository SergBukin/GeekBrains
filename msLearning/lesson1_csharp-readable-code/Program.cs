/* 
Существует множество типов данных, но для начала мы ознакомимся лишь с 
 некоторыми из них:
    
    string используется для вывода слов, фраз и любых других буквенно-цифровых данных, но не для выполнения вычислений с ними;
    char представляет отдельную букву или цифру;
    int представляет целое число;
    decimal представляет число с десятичной дробью;
    bool представляет значения "истина" или "ложь".

 
    Console.WriteLine('b') - Вывод символьного литерала на консоль;
    Console.WriteLine(123) - Вывод целочисленного литерала на консоль;
    Console.WriteLine(12.30m) - Вывод десятичного литерала на консоль;
    Console.WriteLine(true/false) - Вывод логического литерала в консоль;
    **bool — это сокращение от слова boolean, которое обозначает логическое (булево) значение. В C# официально используется наименование "bool".
 
 В C# escape-последовательности символов начинаются с обратной косой черты \, а затем включают еще один символ:

    Console.WriteLine("Hello\nWorld!") - последовательность \n добавит новую строку;
    Console.WriteLine("Hello\tWorld!") - последовательность \t добавит табуляцию;

    Console.WriteLine("c:\\source\\repos");

Буквальная литеральная строка сохраняет все пробелы и символы без необходимости экранирования обратной косой чертой. 
Чтобы создать буквальную строку, используйте директиву @ перед литеральной строкой. 
Два последовательных символа двойной кавычки ("") печатаются в выходной строке как один символ двойной кавычки (").

    Console.WriteLine(@"   c:\source\repos   
        (""this is where your code goes"")");

    Console.Write(@"c:\invoices");

Экранирование символов Юникода:

    // Kon'nichiwa World
    Console.WriteLine("\u3053\u3093\u306B\u3061\u306F World!");

Конкатенация (объединение) нескольких значений в новую строку:

    string firstName = "Bob";
    string message = "Hello " + firstName;
    Console.WriteLine(message);

Интерполяция строк объединяет несколько значений в одну литеральную строку с помощью шаблона и выражений интерполяции. Выражение интерполяции{ } — это переменная, заключенная в символы открывающей и закрывающей фигурных скобок. Литеральная строка 
преобразуется в шаблон, если он имеет префикс $.

    string message = $"{greeting} {firstName}!";

Можно одновременно использовать символ @ для префикса буквального литерала и $ — символ интерполяции строки:

    string projectName = "First-Project";
    Console.WriteLine($@"C:\Output\{projectName}\Data");

    C:\Output\First-Project\Data

    


Имена переменных следует задавать с использованием "верблюжьего" стиля. 
Это значит, что первая буква первого слова должна быть строчной, а начало каждого последующего слова должно выделяться 
прописной буквой. Например, так: string thisIsCamelCase;.
Имена переменных могут содержать буквы, цифры и знаки подчеркивания. Использовать в них специальные знаки, 
такие как решетка (#), дефис (-) или символ доллара ($), нельзя.
В качестве имен переменных нельзя использовать ключевые слова C#. Например, следующие объявления имен переменных 
недопустимы: float float; или string string;
В именах переменных учитывается регистр символов. Таким образом, string MyValue; и string myValue; — 
это две разных переменных.

Примеры имен переменных:

    char userOption;
    int gameScore;
    float particlesPerMillion;
    bool processedCustomer;

Зачем необходимо использовать ключевое слово var? лючевое слово var широко используется в сообществе C#. Если вы ознакомитесь с любым примером кода в книгах или в сети, 
скорее всего, вместо фактического имени типа данных в нем будет применяться ключевое слово var
Неявно типизированная локальная переменная создается с помощью ключевого слова var:

    var message = "Hello world!";


*/